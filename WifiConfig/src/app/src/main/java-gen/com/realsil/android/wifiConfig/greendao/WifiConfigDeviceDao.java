package com.realsil.android.wifiConfig.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.realsil.android.wifiConfig.greendao.WifiConfigDevice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WIFI_CONFIG_DEVICE".
*/
public class WifiConfigDeviceDao extends AbstractDao<WifiConfigDevice, Long> {

    public static final String TABLENAME = "WIFI_CONFIG_DEVICE";

    /**
     * Properties of entity WifiConfigDevice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceName = new Property(1, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceAddress = new Property(2, String.class, "deviceAddress", false, "DEVICE_ADDRESS");
        public final static Property IsConnected = new Property(3, Boolean.class, "isConnected", false, "IS_CONNECTED");
        public final static Property Rssi = new Property(4, Integer.class, "rssi", false, "RSSI");
    };


    public WifiConfigDeviceDao(DaoConfig config) {
        super(config);
    }
    
    public WifiConfigDeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WIFI_CONFIG_DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEVICE_NAME\" TEXT," + // 1: deviceName
                "\"DEVICE_ADDRESS\" TEXT NOT NULL ," + // 2: deviceAddress
                "\"IS_CONNECTED\" INTEGER," + // 3: isConnected
                "\"RSSI\" INTEGER);"); // 4: rssi
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WIFI_CONFIG_DEVICE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WifiConfigDevice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(2, deviceName);
        }
        stmt.bindString(3, entity.getDeviceAddress());
 
        Boolean isConnected = entity.getIsConnected();
        if (isConnected != null) {
            stmt.bindLong(4, isConnected ? 1L: 0L);
        }
 
        Integer rssi = entity.getRssi();
        if (rssi != null) {
            stmt.bindLong(5, rssi);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WifiConfigDevice readEntity(Cursor cursor, int offset) {
        WifiConfigDevice entity = new WifiConfigDevice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceName
            cursor.getString(offset + 2), // deviceAddress
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isConnected
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // rssi
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WifiConfigDevice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceAddress(cursor.getString(offset + 2));
        entity.setIsConnected(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setRssi(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WifiConfigDevice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WifiConfigDevice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
